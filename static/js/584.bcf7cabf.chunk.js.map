{"version":3,"file":"static/js/584.bcf7cabf.chunk.js","mappings":"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","sources":["components/Category/index.tsx","components/MDRenderer/index.tsx","components/PostCard/index.tsx","components/Tag/index.tsx","pages/TagDetail/index.tsx"],"sourcesContent":["import { NavLink } from \"react-router-dom\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faBookmark } from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nimport \"./index.scss\"\r\n\r\ntype Props = {\r\n    category:string,\r\n}\r\n\r\nexport default function Category({category}: Props) {\r\n  return (\r\n    <div className='category-main'>\r\n      <NavLink to={`/categories/${category}`} style={{ textDecoration: \"none\" }}>\r\n        <div className='category-container'>\r\n          <FontAwesomeIcon icon={faBookmark}/>\r\n          <span style={{marginLeft:\"5px\"}}>{category}</span>\r\n        </div>\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}","import {useEffect, useState} from 'react'\r\nimport { Marked } from 'marked'\r\nimport { markedHighlight } from 'marked-highlight'\r\nimport hljs from 'highlight.js'\r\nimport markedKatex from 'marked-katex-extension'\r\n\r\nimport \"highlight.js/scss/atom-one-dark.scss\"\r\nimport \"./index.scss\"\r\n// import store from '../../redux/store'\r\n// import { saveSelectedPostHtml } from '../../redux/actions'\r\n// import './hljs.scss'\r\n\r\ntype Props = {\r\n  markdown: string,\r\n  limit?:number,\r\n  showLimitContent:boolean,\r\n  darkMode:boolean,\r\n}\r\n\r\nconst marked = new Marked(\r\n  markedHighlight({\r\n    langPrefix: 'hljs language-',\r\n    highlight(code, lang, info) {\r\n      const language = hljs.getLanguage(lang) ? lang : 'plaintext';\r\n      const highlightedCode= hljs.highlight(code, { language }).value;\r\n      // return `<pre data-lang=\"${language}\"><code class=\"hljs ${language}\">${highlightedCode}</code></pre>`;\r\n      // return `<code class=\"hljs ${language}>${highlightedCode}</code>`\r\n      return highlightedCode;\r\n    }\r\n  }),\r\n);\r\nmarked.use(markedKatex());\r\n\r\n// 用于自定义目录跳转，使用markdown-navbar可删\r\n// let headerIndex = 0;\r\n// marked.use({\r\n//   extensions:[\r\n//     {\r\n//       name:\"heading\",\r\n//       renderer(token){\r\n//         return `<h${token.depth} id=\"heading-${headerIndex++}\">${token.text}</h${token.depth}>`\r\n//       }\r\n//     },\r\n//   ]\r\n// })\r\n\r\nexport default function MDRenderer({ markdown,limit=100,showLimitContent,darkMode }: Props) {\r\n  const [content, setContent] = useState<any>('');\r\n\r\n  useEffect(() => {\r\n    // 去掉 yaml front matter\r\n    let cleanedMarkdown: string = markdown.replace(/^-{3}[\\s\\S]*?-{3}/, '');\r\n    \r\n    if (showLimitContent && markdown!=='') {\r\n      // 移除 HTML 标签\r\n      let plainText = cleanedMarkdown.replace(/<[^>]*>/g, '');\r\n      // console.log(plainText);\r\n\r\n      if (plainText.length > limit) {\r\n        plainText = plainText.substring(0, limit) + '...';\r\n        // console.log(plainText);\r\n        \r\n      }\r\n      setContent(plainText);\r\n    } else {\r\n      // pre标签添加hljs标签，匹配自定义hljs样式\r\n      // let html = marked.parse(cleanedMarkdown).toString().replace(/<pre>/g,\"<pre id='hljs'>\");\r\n      \r\n      let html = marked.parse(cleanedMarkdown) as string;\r\n      // console.log(html);\r\n\r\n      //如果自实现目录取消注释\r\n      // store.dispatch(saveSelectedPostHtml(html));\r\n      \r\n      setContent(html);\r\n    }\r\n  }, [markdown, limit, showLimitContent]);\r\n\r\n  return (\r\n    <div className={showLimitContent?\"\":`${darkMode?'markdown-body-dark':'markdown-body'}`}>\r\n      {showLimitContent ? (\r\n        <div>{content}</div> \r\n      ) : (\r\n        <div dangerouslySetInnerHTML={{ __html: content }} /> \r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport Card from '../Card'\r\nimport { PostConfig } from '../../utils/types'\r\nimport MDRenderer from '../MDRenderer'\r\nimport { Skeleton } from 'antd'\r\nimport Tag from '../Tag'\r\nimport Category from '../Category'\r\n// import store from '../../redux/store'\r\n\r\nimport './index.scss'\r\nimport { useAppSelector } from '../../redux/hooks'\r\nimport { DEPLOY_ON_GITHUB_PAGES } from '../../utils/constants'\r\n\r\ntype Props = {\r\n  config: PostConfig,\r\n  limit: number,\r\n  showLimitContent: boolean,\r\n  showFooter?: boolean,\r\n}\r\n\r\nexport default function PostCard({ config, limit, showLimitContent, showFooter = true }: Props) {\r\n  const [postConfig] = useState<PostConfig>(config);\r\n  const [postTitle, setPostTitle] = useState<string>(\"\");\r\n  const [markdown, SetMarkdown] = useState<string>(\"\");\r\n  const [tags, setTags] = useState([]);\r\n  const [categories, setCategories] = useState([]);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  // const [isDarkMode,setIsDarkMode]=useState<boolean>(store.getState().darkMode);\r\n  const darkMode=useAppSelector(state=>state.darkMode);\r\n\r\n  useEffect(() => {\r\n    // console.log(postConfig);\r\n    const { title, path } = postConfig;\r\n    let fullPath=DEPLOY_ON_GITHUB_PAGES?\r\n      `${process.env.PUBLIC_URL}${path}?timestamp=${Date.now()}`:\r\n      `${process.env.PUBLIC_URL}${path}`\r\n\r\n    axios.get(fullPath)\r\n      .then(response => {\r\n        // console.log(response);\r\n        setPostTitle(title)\r\n        SetMarkdown(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.log(`PostCard:文章获取失败: ${path}`, err);\r\n\r\n      })\r\n\r\n    if (postConfig && postConfig.tags) {\r\n      setTags([...postConfig.tags]);\r\n    }\r\n\r\n    if (postConfig && postConfig.categories) {\r\n      setCategories([...postConfig.categories]);\r\n    }\r\n\r\n    // const unsubscribe=store.subscribe(()=>{\r\n    //   const {darkMode}=store.getState();\r\n    //   setIsDarkMode(darkMode);\r\n    // })\r\n\r\n    // return ()=>{\r\n    //   unsubscribe();\r\n    // }\r\n\r\n  }, [])\r\n\r\n\r\n  const createTags = () => {\r\n    if (tags) {\r\n      return tags.map((item, index) => {\r\n        return (\r\n          <div key={index} className='post-card-tag-container'>\r\n            <Tag tag={item} />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  const createCategories = () => {\r\n    if (categories) {\r\n      return categories.map((item, index) => {\r\n        return (\r\n          <div key={index} className='post-card-category-container'>\r\n            <Category category={item} />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='hv-center'>\r\n      <Card\r\n        scale={true}\r\n        darkMode={darkMode}\r\n      >\r\n        {\r\n          loading ? <Skeleton active /> :\r\n            <div className='post-card-main'>\r\n              <NavLink to={`/post/detail/${postConfig.id}`} style={{ textDecoration: \"none\" }}>\r\n\r\n                <div className={darkMode?\"post-card-title-dark\":'post-card-title'}>\r\n                  {postTitle}\r\n                </div>\r\n\r\n                <hr className={darkMode?\"hr-dashed-dark\":'hr-dashed'}/>\r\n\r\n                <div className={darkMode?'post-card-content-dark':'post-card-content'}>\r\n                  <MDRenderer darkMode={darkMode} limit={limit} markdown={markdown} showLimitContent={showLimitContent} />\r\n                </div>\r\n\r\n                <hr  className={darkMode?\"hr-double-dark\":'hr-double'}/>\r\n              </NavLink>\r\n              {\r\n                showFooter && (\r\n                  <div className={darkMode?'post-card-footer-dark':'post-card-footer'}>\r\n                    <div className='post-card-tags-block'>\r\n                      {createTags()}\r\n                    </div>\r\n\r\n                    <div className='post-card-categories-block'>\r\n                      {createCategories()}\r\n                    </div>\r\n                  </div>\r\n                )\r\n              }\r\n\r\n            </div>\r\n        }\r\n      </Card>\r\n    </div>\r\n  )\r\n}","import {useEffect, useState} from 'react'\r\n\r\nimport \"./index.scss\"\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype Props = {\r\n  tag: string,\r\n  reload?:boolean,\r\n}\r\n\r\nexport default function Tag({ tag,reload=false }: Props) {\r\n  const [bgColor,setBgColor]=useState<number>(0)\r\n\r\n  useEffect(()=>{\r\n    let color=Math.floor(Math.random()*3);\r\n    // console.log(color);\r\n    setBgColor(color)\r\n    \r\n  },[])\r\n\r\n  const colorChooser=(color:number):string=>{\r\n    let style=\"tag-bg-color-\";\r\n    return style+color;\r\n  }\r\n\r\n  const reloadPage=()=>{\r\n    if(reload){\r\n      window.location.reload();\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"tag-main\">\r\n      <NavLink onClick={reloadPage} to={`/tags/${tag}`} style={{ textDecoration: \"none\" }}>\r\n        <div className={colorChooser(bgColor)}>\r\n          {tag}\r\n        </div>\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}","import { useParams } from \"react-router-dom\"\r\nimport { useEffect, useState } from \"react\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport store from \"../../redux/store\";\r\nimport PostCard from \"../../components/PostCard\";\r\nimport { saveSelectedPostConfig } from \"../../redux/actions\";\r\nimport { PostConfig } from \"../../utils/types\";\r\n\r\nimport './index.scss'\r\nimport { useAppSelector } from \"../../redux/hooks\";\r\n\r\nexport default function TagDetail() {\r\n  const {tag}=useParams();\r\n  // const [tagsDetail,setTagsDetail]=useState<PostConfig[]>();\r\n  const tagsDetail=useAppSelector(state=>state.tagsList)[tag as string];\r\n\r\n  // useEffect(()=>{\r\n  //   const {tagsList}=store.getState();\r\n  //   setTagsDetail(tagsList[tag as string]);\r\n\r\n  //   const unsubscribe=store.subscribe(()=>{\r\n  //     const {tagsList}=store.getState();\r\n  //     setTagsDetail(tagsList[tag as string]);\r\n  //   })\r\n\r\n  //   return ()=>{\r\n  //     unsubscribe();\r\n  //   }\r\n\r\n  // },[tag])\r\n\r\n  const setSelectedPost=(selectedPost:PostConfig)=>{\r\n    // console.log(selectedPost);\r\n    store.dispatch(saveSelectedPostConfig(selectedPost));\r\n  }\r\n\r\n  const createPostCards=()=>{\r\n    if(tagsDetail && tagsDetail.length>0){\r\n      return tagsDetail.map((post:PostConfig)=>{\r\n        return(\r\n          <div \r\n          style={{width:\"100%\",marginBottom:\"3vh\"}} \r\n          onClick={()=>setSelectedPost(post)}\r\n          key={post.id}\r\n          >\r\n            <PostCard \r\n            config={post} \r\n            key={post.id}\r\n            limit={250} \r\n            showLimitContent={true}\r\n            />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-main\">\r\n      <div className=\"page-main-title\">\r\n        <PageTitle title={tag as string}/>\r\n      </div>\r\n\r\n      <div className=\"page-main-content\">\r\n        {createPostCards()}\r\n      </div>\r\n    </div>\r\n  )\r\n}"],"names":["Category","_ref","category","_jsx","className","children","NavLink","to","concat","style","textDecoration","_jsxs","FontAwesomeIcon","icon","faBookmark","marginLeft","marked","Marked","markedHighlight","langPrefix","highlight","code","lang","info","language","hljs","getLanguage","value","MDRenderer","markdown","limit","showLimitContent","darkMode","content","setContent","useState","useEffect","cleanedMarkdown","replace","plainText","length","substring","html","parse","dangerouslySetInnerHTML","__html","use","markedKatex","PostCard","config","showFooter","postConfig","postTitle","setPostTitle","SetMarkdown","tags","setTags","categories","setCategories","loading","setLoading","useAppSelector","state","title","path","fullPath","DEPLOY_ON_GITHUB_PAGES","process","Date","now","axios","get","then","response","data","catch","err","console","log","Card","scale","Skeleton","active","id","createTags","map","item","index","Tag","tag","createCategories","reload","bgColor","setBgColor","color","Math","floor","random","onClick","reloadPage","window","location","TagDetail","useParams","tagsDetail","tagsList","PageTitle","createPostCards","post","width","marginBottom","setSelectedPost","selectedPost","store","dispatch","saveSelectedPostConfig"],"sourceRoot":""}