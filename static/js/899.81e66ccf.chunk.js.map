{"version":3,"file":"static/js/899.81e66ccf.chunk.js","mappings":"kJAUe,SAASA,EAAGC,GAA+B,IAA9B,IAAEC,EAAG,OAACC,GAAO,GAAcF,EACrD,MAAOG,EAAQC,IAAYC,EAAAA,EAAAA,UAAiB,IAE5CC,EAAAA,EAAAA,YAAU,KACR,IAAIC,EAAMC,KAAKC,MAAoB,EAAdD,KAAKE,UAE1BN,EAAWG,EAAM,GAEjB,IAcF,OACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUC,UACvBF,EAAAA,EAAAA,KAACG,EAAAA,GAAO,CAACC,QATIC,KACZd,GACDe,OAAOC,SAAShB,QAClB,EAMgCiB,GAAE,SAAAC,OAAWnB,GAAOoB,MAAO,CAAEC,eAAgB,QAAST,UAClFF,EAAAA,EAAAA,KAAA,OAAKC,WAfSL,EAeeJ,EAdvB,gBACGI,GAa6BM,SACnCZ,QAhBWM,KAqBtB,C,sJC7Be,SAASgB,IAEtB,MAAMC,GAAKC,EAAAA,EAAAA,IAAeC,GAAOA,EAAMC,WACjCC,GAASH,EAAAA,EAAAA,IAAeC,GAAOA,EAAME,WACrCC,GAASC,EAAAA,EAAAA,QAAO,MAChBC,GAASC,EAAAA,EAAAA,OAgBf1B,EAAAA,EAAAA,YAAU,KACLkB,GACDS,GACF,GAEA,CAACT,IAEH,MAAMS,EAAgBA,KACpB,IAAIC,EAAUC,EAAAA,GAAaN,EAASO,SACpC,MAAMC,EAAS,CACbC,OAAQ,CACN,CACEC,KAAM,YACNC,SAAU,EACVC,UAAW,CAAC,GAAI,IAChBC,cAAe,CAAC,EAAG,GACnBC,MAAO,WACPC,UAAW,CACTC,OAAQ,CACNtC,MAAOA,IAEH,OACA,CACEC,KAAKsC,MAAsB,IAAhBtC,KAAKE,UAChBF,KAAKsC,MAAsB,IAAhBtC,KAAKE,UAChBF,KAAKsC,MAAsB,IAAhBtC,KAAKE,WAChBqC,KAAK,KACP,KAINC,SAAU,CACRC,WAAY,GACZC,YAAa,SAGjBC,KAAKC,OAAOC,KAAK7B,GAAM8B,KAAIC,IACjB,CACNC,KAAKD,EACLE,MAAMC,SAASlC,EAAK+B,GAASI,QAC7BC,KAAK,SAADxC,OAAUmC,UAOxBrB,EAAU2B,UAAUxB,GACpBH,EAAU4B,GAAG,SAAS,SAAUC,GAC1BA,EAAOZ,MAAQY,EAAOZ,KAAKS,MAC7B7B,EAAS,GAADX,OAAI2C,EAAOZ,KAAKS,MAE5B,GAAE,EAeJ,OACEI,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,YAAWC,SAAA,EAExBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BF,EAAAA,EAAAA,KAACsD,EAAAA,EAAS,CAACC,MAAM,YAGnBF,EAAAA,EAAAA,MAAA,OAAKpD,UAAU,oBAAmBC,SAAA,EAC9BF,EAAAA,EAAAA,KAACwD,EAAAA,EAAI,CAACvC,SAAUA,EAASf,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,sBAAqBC,SArB7BuD,MACf,GAAG5C,EACD,OAAO4B,OAAOC,KAAK7B,GAAM8B,KAAKrD,IAE1BU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,KAACZ,EAAAA,EAAG,CAACE,IAAKA,KADwBA,IAK1C,EAaWmE,QAILzD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,uBAAsBC,UACnCF,EAAAA,EAAAA,KAACwD,EAAAA,EAAI,CAACvC,SAAUA,EAASf,UACvBF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAwByD,IAAKxC,aAO1D,C","sources":["components/Tag/index.tsx","pages/TagsPage/index.tsx"],"sourcesContent":["import {useEffect, useState} from 'react'\r\n\r\nimport \"./index.scss\"\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype Props = {\r\n  tag: string,\r\n  reload?:boolean,\r\n}\r\n\r\nexport default function Tag({ tag,reload=false }: Props) {\r\n  const [bgColor,setBgColor]=useState<number>(0)\r\n\r\n  useEffect(()=>{\r\n    let color=Math.floor(Math.random()*3);\r\n    // console.log(color);\r\n    setBgColor(color)\r\n    \r\n  },[])\r\n\r\n  const colorChooser=(color:number):string=>{\r\n    let style=\"tag-bg-color-\";\r\n    return style+color;\r\n  }\r\n\r\n  const reloadPage=()=>{\r\n    if(reload){\r\n      window.location.reload();\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"tag-main\">\r\n      <NavLink onClick={reloadPage} to={`/tags/${tag}`} style={{ textDecoration: \"none\" }}>\r\n        <div className={colorChooser(bgColor)}>\r\n          {tag}\r\n        </div>\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}","import { useNavigate, useParams } from \"react-router-dom\";\r\nimport Card from \"../../components/Card\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport store from \"../../redux/store\";\r\nimport Tag from \"../../components/Tag\";\r\nimport * as echarts from 'echarts/core';\r\nimport 'echarts-wordcloud';\r\nimport { useAppSelector } from \"../../redux/hooks\";\r\n\r\nimport \"./index.scss\";\r\n\r\nexport default function TagsPage() {\r\n  // const [tags,setTags]=useState<any>();\r\n  const tags=useAppSelector(state=>state.tagsList);\r\n  const darkMode=useAppSelector(state=>state.darkMode);\r\n  const chartRef=useRef(null);\r\n  const navigate=useNavigate();\r\n  \r\n  // useEffect(()=>{\r\n  //   const {tagsList}=store.getState();\r\n  //   setTags(tagsList);\r\n\r\n  //   const unsubscribe=store.subscribe(()=>{\r\n  //     const {tagsList={}}=store.getState();\r\n  //     setTags(tagsList);\r\n  //   })\r\n\r\n  //   return ()=>{\r\n  //     unsubscribe();\r\n  //   }\r\n  // },[])\r\n  \r\n  useEffect(()=>{\r\n    if(tags){\r\n      createWordCloud();\r\n    }\r\n      \r\n  },[tags])\r\n\r\n  const createWordCloud=()=>{\r\n    let wordcloud=echarts.init(chartRef.current);\r\n    const option = {\r\n      series: [\r\n        {\r\n          type: 'wordCloud',\r\n          gridSize: 2,\r\n          sizeRange: [20, 60],\r\n          rotationRange: [0, 0],\r\n          shape: 'pentagon',\r\n          textStyle: {\r\n            normal: {\r\n              color: ()=>{\r\n                return (\r\n                  'rgb(' +\r\n                  [\r\n                    Math.round(Math.random() * 255),\r\n                    Math.round(Math.random() * 255),\r\n                    Math.round(Math.random() * 255),\r\n                  ].join(',') +\r\n                  ')'\r\n                );\r\n              },\r\n            },\r\n            emphasis: {\r\n              shadowBlur: 10,\r\n              shadowColor: '#333',\r\n            },\r\n          },\r\n          data:Object.keys(tags).map(tagName=>{\r\n            return ({\r\n              name:tagName,\r\n              value:parseInt(tags[tagName].length),\r\n              link:`/tags/${tagName}`,\r\n            })\r\n          })\r\n        }\r\n      ]\r\n    };\r\n    \r\n    wordcloud.setOption(option);\r\n    wordcloud.on('click', function (params:any) {\r\n      if (params.data && params.data.link) {\r\n        navigate(`${params.data.link}`)\r\n      }\r\n    });\r\n  }\r\n\r\n  const createTags=():React.ReactNode=>{\r\n    if(tags){\r\n      return Object.keys(tags).map((tag:any)=>{\r\n        return (\r\n          <div className=\"tag-container\" key={tag}>\r\n            <Tag tag={tag} />\r\n          </div>\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"page-main\">\r\n\r\n      <div className=\"page-main-title\">\r\n        <PageTitle title=\"Tags\"/>\r\n      </div>\r\n\r\n      <div className=\"page-main-content\">\r\n          <Card darkMode={darkMode}>\r\n            <div className=\"tags-page-card-tags\">\r\n              {createTags()}\r\n            </div>\r\n          </Card>\r\n\r\n          <div className=\"tags-page-chart-main\">\r\n            <Card darkMode={darkMode}>\r\n              <div className=\"tags-page-chart-block\" ref={chartRef} />\r\n            </Card>\r\n          </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}"],"names":["Tag","_ref","tag","reload","bgColor","setBgColor","useState","useEffect","color","Math","floor","random","_jsx","className","children","NavLink","onClick","reloadPage","window","location","to","concat","style","textDecoration","TagsPage","tags","useAppSelector","state","tagsList","darkMode","chartRef","useRef","navigate","useNavigate","createWordCloud","wordcloud","echarts","current","option","series","type","gridSize","sizeRange","rotationRange","shape","textStyle","normal","round","join","emphasis","shadowBlur","shadowColor","data","Object","keys","map","tagName","name","value","parseInt","length","link","setOption","on","params","_jsxs","PageTitle","title","Card","createTags","ref"],"sourceRoot":""}